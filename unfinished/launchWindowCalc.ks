//Launch Window Calculator
//Must have target selected
//Target must be in orbit of same body as current vessel.
// http://pastebin.com/fq3nqJ2P


SET TIME_TO_NEXT_NODE TO 10000000.
SET TIME_TO_HALF_ORBITAL_VELOCITY TO 350.
SET TARGET_INCLINATION TO TARGET:OBT:INCLINATION.

//UNTIL TIME_TO_NEXT_NODE < TIME_TO_HALF_ORBITAL_VELOCITY {

UNTIL 1=0 {

	SET CURRENT_TIME TO TIME:SECONDS.
	SET SHIP_ORBIT_NORMAL TO VCRS(SHIP:VELOCITY:ORBIT,POSITIONAT(SHIP,TIME:SECONDS)-SHIP:BODY:POSITION).
	SET TARGET_ORBIT_NORMAL TO VCRS(TARGET:VELOCITY:ORBIT,TARGET:POSITION-SHIP:BODY:POSITION).
	SET LINEOFNODES TO VCRS(SHIP_ORBIT_NORMAL,TARGET_ORBIT_NORMAL).
	SET ANGLE_TO_NODE TO VANG(POSITIONAT(SHIP,CURRENT_TIME)-SHIP:BODY:POSITION,LINEOFNODES).
	SET ANGLE_TO_NODE2 TO VANG(POSITIONAT(SHIP,CURRENT_TIME+5)-SHIP:BODY:POSITION,LINEOFNODES).
	SET ANGLE_TO_OPPOSITE_NODE TO VANG(POSITIONAT(SHIP,CURRENT_TIME)-SHIP:BODY:POSITION,-1*LINEOFNODES).
	SET RELATIVE_INCLINATION TO VANG(SHIP_ORBIT_NORMAL,TARGET_ORBIT_NORMAL).
	SET ANGLE_TO_NODE_DELTA TO ANGLE_TO_NODE2-ANGLE_TO_NODE.


	SET SHIP_ORBITAL_ANGULAR_VEL TO (SHIP:VELOCITY:ORBIT:MAG / (BODY:RADIUS+SHIP:ALTITUDE))  * (180/CONSTANT():PI).
	SET TIME_TO_NODE TO ANGLE_TO_NODE / SHIP_ORBITAL_ANGULAR_VEL.
	SET TIME_TO_OPPOSITE_NODE TO ANGLE_TO_OPPOSITE_NODE / SHIP_ORBITAL_ANGULAR_VEL.
	SET TIME_TO_NODE_MINUTES TO FLOOR((TIME_TO_NODE)/60).
	SET TIME_TO_NODE_SECONDS TO (((TIME_TO_NODE)/60)-TIME_TO_NODE_MINUTES)*60.
	SET TIME_TO_OPPOSITE_NODE_MINUTES TO FLOOR((TIME_TO_OPPOSITE_NODE)/60).
	SET TIME_TO_OPPOSITE_NODE_SECONDS TO (((TIME_TO_OPPOSITE_NODE)/60)-TIME_TO_OPPOSITE_NODE_MINUTES)*60.
	
	IF TARGET_INCLINATION < SHIP:LATITUDE {
		SET LAUNCH_AZIMUTH TO 90.
	} ELSE {
		SET LAUNCH_AZIMUTH TO ARCSIN( (COS(TARGET_INCLINATION)) / (COS(SHIP:LATITUDE) ) ).
	}

	CLEARSCREEN.
	PRINT "Current Inclination:    " + ROUND(SHIP:OBT:INCLINATION,2) + " degrees".
	PRINT "Target Inclination:     " + ROUND(TARGET_INCLINATION,2) + " degrees".
	PRINT "Relative Inclination:   " + ROUND(RELATIVE_INCLINATION,2) + " degrees".
	PRINT "Angular Velocity:       " + ROUND(SHIP_ORBITAL_ANGULAR_VEL,4) + " degrees/sec".
	
	IF ANGLE_TO_NODE_DELTA < 0 {
		PRINT "Angle to next node:     " + ROUND(ANGLE_TO_NODE,2) + " degrees".
		PRINT "Time to node:           " + TIME_TO_NODE_MINUTES + "min " + ROUND(TIME_TO_NODE_SECONDS,0) + "sec".
	} ELSE {
		PRINT "Angle to next node:     " + ROUND(ANGLE_TO_OPPOSITE_NODE,2) + " degrees".
		PRINT "Time to node:           " + TIME_TO_OPPOSITE_NODE_MINUTES + "min " + ROUND(TIME_TO_OPPOSITE_NODE_SECONDS,0) + "sec".
	}


	PRINT "Launch Azimuth:         " + ROUND(LAUNCH_AZIMUTH,2) + " degrees".

	WAIT 0.25.

//To turn on helper vectors change FALSE to TRUE.
//Cannon get vectors to draw from planet center?!

	SET SHIP_ORBIT_ARROW TO VECDRAWARGS(
	   SHIP:POSITION-SHIP:BODY:POSITION,
	    SHIP_ORBIT_NORMAL,
	    RGB(1,0,0),
	    "Ship Orbit Normal Vector",
	    0.0001,
	    FALSE                  ).
		
	SET TARGET_ORBIT_ARROW TO VECDRAWARGS(
	    SHIP:POSITION-SHIP:BODY:POSITION,
	    TARGET_ORBIT_NORMAL,
	    RGB(0,1,0),
	    "Target Orbit Normal Vector",
	    0.0001,
	    FALSE                  ).
		
	SET LINEOFNODES_ARROW TO VECDRAWARGS(
		SHIP:POSITION-SHIP:BODY:POSITION,
	    LINEOFNODES:NORMALIZED,
	    RGB(0,0,1),
	    "Line of Nodes Vector",
	    1000000,
	    FALSE                  ).
		
	SET BODY_SHIP_ARROW TO VECDRAWARGS(
	    SHIP:POSITION-SHIP:BODY:POSITION,
	    SHIP:BODY:POSITION,
	    RGB(1,0,1),
	    "Ship-Body Vector",
		0.1,
	    FALSE                  ).
		



}